{{>licenseInfo}}
import { Http, Headers, RequestOptions, Response, URLSearchParams } from '@angular/http';
import { Injectable, Inject } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/add/operator/map';
import { ApiConfig, Api{{appName}}ConfigMap } from './api-config';

/* tslint:disable:no-unused-variable member-ordering */

{{#operations}}
'use strict';

{{#description}}
/**
 * {{&description}}
 */
{{/description}}
@Injectable()
export class {{classname}} {
  public defaultHeaders : Headers = new Headers();
  private config: ApiConfig;

  constructor(protected http: Http, @Inject('API_CONFIG') apiConfig: Api{{appName}}ConfigMap) {
    this.config = <ApiConfig>apiConfig.{{appName}};
    if (!this.config) {
      throw new Error('No Config Provider for {{appName}}');
    }
  }

{{#operation}}
  /**
   * {{summary}}
   {{#notes}}*{{ notes}}{{/notes}}
   {{#allParams}}* @param {{paramName}}{{#description}} {{description}}{{/description}}
   {{/allParams}}*/
  public {{nickname}} ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}extraHttpRequestParams?: any ) : Observable<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}{}{{/returnType}}> {
    const path = this.config.basePath + '{{path}}'{{#pathParams}}
      .replace('{' + '{{baseName}}' + '}', String({{paramName}})){{/pathParams}};

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
{{#hasFormParams}}
    let formParams = new URLSearchParams();
{{/hasFormParams}}
{{#allParams}}
{{#required}}
    // verify required parameter '{{paramName}}' is not null or undefined
    if ({{paramName}} === null || {{paramName}} === undefined) {
      throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
    }

{{/required}}
{{/allParams}}
{{#queryParams}}
    if ({{paramName}} !== undefined) {
      queryParameters.set('{{baseName}}', {{paramName}} as any);
    }

{{/queryParams}}
    if (this.config.pid) {
      queryParameters.set('pid', this.config.pid);
    }

{{#headerParams}}
    headerParams.set('{{baseName}}', {{paramName}});
{{/headerParams}}
{{#hasFormParams}}
    headerParams.set('Content-Type', 'application/x-www-form-urlencoded');

{{/hasFormParams}}
{{#formParams}}
    formParams['{{baseName}}'] = {{paramName}};

{{/formParams}}
    let requestOptions: RequestOptions = {
      method: '{{httpMethod}}',
      headers: headerParams,
      search: queryParameters,
    };

    {{#bodyParam}}
    requestOptions.body = JSON.stringify({{paramName}});
    {{/bodyParam}}
    {{#hasFormParams}}
    requestOptions.body = formParams.toString();
    {{/hasFormParams}}
    const interceptor = this.config.requestInterceptor;

    if (interceptor) {
      interceptor(path, requestOptions);
    }

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
    }

{{/operation}}
}
{{/operations}}
